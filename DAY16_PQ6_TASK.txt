//problem  6_TASK
/*
you have to create a custom calculater with following operations :
1. + ->  Addition
2. - -> Subtraction
3. * -> multiplication
4. / -> Division

Which throws the following exceptions  : 
1.Invalid input Exception 8 & 9
2. Cannot divide by 0 Exception 
3.Max input Exception  if any of the input is greater than 100000
4.max multiplier Reached Exception - Don't allow any multiplication input to be greater than 7000 
*/

import java.util.*;
public class DAY16_PQ6_TASK{
	public static void main(String[] args) {
         int a;
        String op;
        int b;

        do {
            try {
                a = getInputNumber("Enter the first number: ");
                op = getInputOperator("Enter the operator (+, -, *, /): ");
                b = getInputNumber("Enter the second number: ");

                int result = calculate(a, op, b);
                System.out.println("Result: " + result);

            } catch (InvalidInputException | CannotDivideByZeroException | MaxMultiplierReachedException | MaxInputException e) {
                System.out.println(e.getMessage());
            }
        } while (recall());
    }

    public static int getInputNumber(String message) throws MaxInputException {
        Scanner sc = new Scanner(System.in);
        int input;
        while (true) {
            try {
                System.out.print(message);
                input = sc.nextInt();
                if (input > 100000) {
                    throw new MaxInputException("Input exceeds the maximum allowed value (100000).");
                }
                break;
            } catch (InputMismatchException e) {
                System.out.println("Invalid input. Please enter a valid number.");
                sc.next(); // Consume the invalid input to avoid an infinite loop
            } catch (MaxInputException e) {
                System.out.println(e.getMessage());
            }
        }
        return input;
    }

    public static String getInputOperator(String message) {
        Scanner sc = new Scanner(System.in);
        String[] allowedOperators = {"+", "-", "*", "/"};
        String operator;
        while (true) {
            System.out.print(message);
            operator = sc.next();
            if (!Arrays.asList(allowedOperators).contains(operator)) {
                System.out.println("Invalid operator. Please enter one of +, -, *, /");
            } else {
                break;
            }
        }
        return operator;
    }

    public static boolean recall() {
        Scanner sc = new Scanner(System.in);
        System.out.print("Do you want to enter another set of numbers? (yes/no): ");
        String response = sc.next().toLowerCase();
        return response.equals("yes");
    }

    public static int calculate(int a, String operator, int b) throws InvalidInputException, CannotDivideByZeroException, MaxMultiplierReachedException {
        switch (operator) {
            case "+":
                return a + b;
            case "-":
                return a - b;
            case "*":
                if (a > 7000 || b > 7000) {
                    throw new MaxMultiplierReachedException("Multiplication input exceeds the maximum allowed value (7000).");
                }
                return a * b;
            case "/":
                if (b == 0) {
                    throw new CannotDivideByZeroException("Cannot divide by zero.");
                } else {
                    return a / b;
                }
            default:
                throw new InvalidInputException("Invalid operator: " + operator);
        }
    }
}

class InvalidInputException extends Exception {
    public InvalidInputException(String message) {
        super(message);
    }
}

class CannotDivideByZeroException extends Exception {
    public CannotDivideByZeroException(String message) {
        super(message);
    }
}

class MaxMultiplierReachedException extends Exception {
    public MaxMultiplierReachedException(String message) {
        super(message);
    }
}

class MaxInputException extends Exception {
    public MaxInputException(String message) {
        super(message);
    }
}

